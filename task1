import os
import re
import torch
import torch.nn as nn
import torch.optim as optim
from torch_geometric.data import Data, DataLoader
from torch_geometric.nn import GCNConv
import abc_py

# Step 1: Setup environment variables and paths
circuit_path = './InitialAIG/train/'
lib_file = './lib/7nm/7nm.lib'
log_file = 'alu2.log'
dataset_path = 'path_to_dataset'

# Step 2: Feature extraction from AIG using abc_py
def extract_features(state):
    abc = abc_py.AbcInterface()
    abc.start()
    abc.read(state)
    
    data = {}
    num_nodes = abc.numNodes()
    data['node_type'] = torch.zeros(num_nodes, dtype=torch.int)
    data['num_inverted_predecessors'] = torch.zeros(num_nodes, dtype=torch.int)
    edge_src_index = []
    edge_target_index = []
    
    for node_idx in range(num_nodes):
        aig_node = abc.aigNode(node_idx)
        node_type = aig_node.nodeType()
        
        if node_type == 0 or node_type == 2:
            data['node_type'][node_idx] = 0
        elif node_type == 1:
            data['node_type'][node_idx] = 1
        else:
            data['node_type'][node_idx] = 2
        
        if node_type == 4:
            data['num_inverted_predecessors'][node_idx] = 1
        if node_type == 5:
            data['num_inverted_predecessors'][node_idx] = 2
        
        if aig_node.hasFanin0():
            fanin = aig_node.fanin0()
            edge_src_index.append(node_idx)
            edge_target_index.append(fanin)
        
        if aig_node.hasFanin1():
            fanin = aig_node.fanin1()
            edge_src_index.append(node_idx)
            edge_target_index.append(fanin)
    
    data['edge_index'] = torch.tensor([edge_src_index, edge_target_index], dtype=torch.long)
    data['nodes'] = num_nodes
    return data

# Step 3: Define GNN model
class GNNModel(nn.Module):
    def __init__(self, input_dim, hidden_dim, output_dim):
        super(GNNModel, self).__init__()
        self.conv1 = GCNConv(input_dim, hidden_dim)
        self.conv2 = GCNConv(hidden_dim, output_dim)
        self.fc = nn.Linear(output_dim, 1)
    
    def forward(self, data):
        x, edge_index = data.x, data.edge_index
        x = self.conv1(x, edge_index)
        x = torch.relu(x)
        x = self.conv2(x, edge_index)
        x = torch.relu(x)
        x = torch.mean(x, dim=0)
        x = self.fc(x)
        return x

# Step 4: Prepare dataset and dataloaders
def prepare_dataset(dataset_path):
    # Load and preprocess the dataset
    dataset = []
    for state in os.listdir(dataset_path):
        features = extract_features(state)
        target = extract_target(state)
        data = Data(x=features['node_type'], edge_index=features['edge_index'], y=target)
        dataset.append(data)
    return dataset

def extract_target(state):
    # Implement function to extract target evaluation from state
    # This function should parse the log file or any other relevant file to get the area and delay
    # Example:
    abcRunCmd = f"./yosys -abc -c \"read {circuit_path + state}; read_lib {lib_file}; map; topo; stime\" > {log_file}"
    os.system(abcRunCmd)
    with open(log_file) as f:
        area_information = re.findall(r'[a-zA-Z0-9.]+', f.readlines()[-1])
    eval = float(area_information[-9]) * float(area_information[-4])
    return torch.tensor([eval], dtype=torch.float)

dataset = prepare_dataset(dataset_path)
train_loader = DataLoader(dataset[:int(0.8*len(dataset))], batch_size=32, shuffle=True)
test_loader = DataLoader(dataset[int(0.8*len(dataset)):], batch_size=32, shuffle=False)

# Step 5: Train the GNN model
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = GNNModel(input_dim=1, hidden_dim=16, output_dim=8).to(device)
optimizer = optim.Adam(model.parameters(), lr=0.01)
criterion = nn.MSELoss()

def train():
    model.train()
    total_loss = 0
    for data in train_loader:
        data = data.to(device)
        optimizer.zero_grad()
        output = model(data)
        loss = criterion(output, data.y)
        loss.backward()
        optimizer.step()
        total_loss += loss.item()
    return total_loss / len(train_loader)

def test():
    model.eval()
    total_loss = 0
    with torch.no_grad():
        for data in test_loader:
            data = data.to(device)
            output = model(data)
            loss = criterion(output, data.y)
            total_loss += loss.item()
    return total_loss / len(test_loader)

for epoch in range(100):
    train_loss = train()
    test_loss = test()
    print(f'Epoch {epoch+1}, Train Loss: {train_loss:.4f}, Test Loss: {test_loss:.4f}')

# Save the model
torch.save(model.state_dict(), 'gnn_model.pth')
